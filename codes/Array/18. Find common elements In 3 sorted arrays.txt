** Find Common in 3 sorted array
Approach 1: using Hash table
Time Complexity: O(n), Space Complexity: O(n)
Code: c++
 vector<int> commonElements(vector<int> &arr1, vector<int> &arr2,
                               vector<int> &arr3) {
      map<int,int> map;
      vector<int> ans;
      for(int a:arr1)
        map[a]=1;
    for(int a:arr2) {
        if(map.find(a) != map.end())
        map[a]=2;
    }
    for(int a:arr3) {
        if(map.find(a) != map.end() && map[a] == 2)
        map[a]=3;
    }
        
        for(auto a:map){
            if(a.second >= 3)
                ans.push_back(a.first);
        }
        if(ans.size() == 0){
            return {-1};
        }
        return ans;
    }

Approach 2: using three pointers
Time Complexity: O(n1+n2+n3), Space Complexity: O(1)
code: c++
vector<int> commonElements(vector<int> arr1, vector<int> arr2,
                               vector<int> arr3) {
        int n1 = arr1.size();
        int n2 = arr2.size();
        int n3 = arr3.size();
        int i=0,j=0,k=0;
        vector<int> ans;
        
        while(i<n1 && j<n2 && k<n3) {
            // cout<<arr1[i]<<" "<<arr2[j]<<" "<<arr3[k]<<endl;
           if((arr1[i] == arr2[j]) && (arr2[j] == arr3[k])) {
                ans.push_back(arr1[i]);
                i++;j++;k++;
                while(i<n1 && arr1[i] == arr1[i-1]) i++;
                while(j<n2 && arr2[j] == arr2[j-1]) j++;
                while(k<n3 && arr3[k] == arr3[k-1]) k++;
            }
            else if(arr1[i] < arr2[j]) i++;
            else if(arr2[j] < arr3[k]) j++;
            else k++;
        }
        return ans;
}