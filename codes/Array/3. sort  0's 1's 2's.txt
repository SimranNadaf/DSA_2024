** Sort 0's, 1's and 2's
Approach 1: Sort(): Naive Solution: Time Complexity: O(n log n), Space Complexity: O(1)
Code: sort(arr.begin(), arr.end())

Approach 2: using counter for 0's, 1's and 2's : (Better) : Time Complexity: O (n), Space Complexity: O(1)
Code: 
	int count0=0;
        int count1=0;
        int count2=0;
        for(int i=0;i<arr.size();i++){
            if(arr[i]==0) count0++;
            else if(arr[i]==1) count1++;
            else count2++;
        }
        for(int i=0;i<arr.size();i++){
            if(count0 != 0){
                arr[i] = 0; count0--;
            }
            else if(count1 != 0) {
                arr[i] = 1;count1--;
            }
            else if(count2 != 0) {
                arr[i] = 2;count2--;
            }
        }

Approach 3: Dutch National Flag: (Expected) : Time Complexity: O (n), Space Complexity: O(1)
Code:
	int low = 0, mid = 0, high = arr.size()-1;
        while(mid<=high){
            if(arr[mid] == 0){
                swap(arr, low, mid);
                low++;mid++;
            }
            else if(arr[mid] == 2){
                swap(arr, mid, high);
                high--;
            }
            else{
                mid++;
            }